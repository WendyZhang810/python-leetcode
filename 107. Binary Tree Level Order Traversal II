'''
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        else:
            ans=[]
            cur_val=[]
            cur_level=[root]
            next_level=[]
            temp=None
            while cur_level:
                temp=cur_level.pop(0)  
                if temp:
                    cur_val.append(temp.val)
                    next_level.append(temp.left)
                    next_level.append(temp.right)
                if not cur_level:
                    cur_level=next_level
                    next_level=[]
                    if cur_val:
                        ans.append(cur_val)
                        cur_val=[]
            return ans[::-1]
